{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vasu.gupta\\\\UnUsed\\\\Documents\\\\online-test\\\\src\\\\components\\\\takeTest.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport { Link } from \"react-router-dom\";\nimport { getAllQuestions, getAttemptCount } from \"../utils/questionsUtil.js\";\nimport { saveTestState } from \"../utils/sessionManag.js\";\nimport Question from \"./question.jsx\";\nimport CustomTimer from \"./timer.jsx\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\nimport PropTypes from \"prop-types\";\n\nconst TakeTest = props => {\n  _s();\n\n  const [quesList, setQuesList] = useState([]);\n  const [currentQues, setCurrentQues] = useState(0);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [timesUp, setTimesUp] = useState(false);\n  const {\n    location\n  } = props;\n  const quesCount = quesList.length;\n\n  function mapToQuesModel(ques) {\n    const {\n      title,\n      choices,\n      multipleAns,\n      answer\n    } = ques;\n    const mapChoices = choices.map(choice => {\n      return {\n        value: choice,\n        selected: false\n      };\n    });\n    return {\n      title,\n      choices: mapChoices,\n      multipleAns,\n      state: {\n        answered: false,\n        seen: false\n      },\n      answer\n    };\n  }\n\n  function submitTest() {\n    saveTestState(quesList, location.state.skillLevel, true);\n    setIsSubmitted(true);\n  }\n\n  function handleSubmit() {\n    const attemptCount = getAttemptCount(quesList);\n    if (attemptCount < quesCount) confirmAlert({\n      title: \"Submit test\",\n      message: `You have not attempted ${quesCount - attemptCount} questions. Still want to submit ?`,\n      buttons: [{\n        label: \"Yes\",\n        onClick: () => submitTest()\n      }, {\n        label: \"No\",\n        onClick: () => {}\n      }]\n    });else {\n      submitTest();\n    }\n  }\n\n  function onTimeFinish() {\n    setTimesUp(true);\n    submitTest();\n  }\n\n  function othersAnswered(choices, currentChoice) {\n    return choices.filter((ch, index) => index !== currentChoice && ch.selected).length;\n  }\n\n  const onCheckAnswer = (quesIndex, choiceIndex, e) => {\n    const selected = e.target.checked;\n\n    if (e.target.type === \"radio\") {\n      setQuesList([...quesList.slice(0, quesIndex), { ...quesList[quesIndex],\n        choices: [...quesList[quesIndex][\"choices\"].slice(0, choiceIndex).map(q => {\n          return { ...q,\n            selected: false\n          };\n        }), { ...quesList[quesIndex][\"choices\"][choiceIndex],\n          selected: true\n        }, ...quesList[quesIndex][\"choices\"].slice(choiceIndex + 1).map(q => {\n          return { ...q,\n            selected: false\n          };\n        })],\n        state: { ...quesList[quesIndex].state,\n          answered: true\n        }\n      }, ...quesList.slice(quesIndex + 1)]);\n    } else {\n      setQuesList([...quesList.slice(0, quesIndex), { ...quesList[quesIndex],\n        choices: [...quesList[quesIndex][\"choices\"].slice(0, choiceIndex), { ...quesList[quesIndex][\"choices\"][choiceIndex],\n          selected: selected\n        }, ...quesList[quesIndex][\"choices\"].slice(choiceIndex + 1)],\n        state: { ...quesList[quesIndex].state,\n          answered: othersAnswered(quesList[quesIndex].choices, choiceIndex) || selected\n        }\n      }, ...quesList.slice(quesIndex + 1)]);\n    }\n  };\n\n  function moveToPrev() {\n    const quesListConst = quesList;\n    quesListConst[currentQues].state = { ...quesListConst[currentQues].state,\n      seen: true\n    };\n    setQuesList(quesListConst);\n    if (currentQues === 0) return;\n    setCurrentQues(currentQues - 1);\n  }\n\n  function moveToNext() {\n    const quesListConst = quesList;\n    quesListConst[currentQues].state = { ...quesListConst[currentQues].state,\n      seen: true\n    };\n    setQuesList(quesListConst);\n    if (currentQues >= quesCount) return;\n    setCurrentQues(currentQues + 1);\n  }\n\n  function navigateToQues(quesNo) {\n    const quesListConst = quesList;\n    quesListConst[currentQues].state = { ...quesListConst[currentQues].state,\n      seen: true\n    };\n    quesListConst[quesNo].state = { ...quesListConst[quesNo].state,\n      seen: true\n    };\n    setCurrentQues(quesNo);\n  }\n\n  function getQuesState(ques, quesNo) {\n    if (currentQues === quesNo) return \"current\";else if (ques.state.answered) return \"answered\";else if (ques.state.seen) return \"seen\";else return \"unseen\";\n  }\n\n  useEffect(() => {\n    const {\n      state\n    } = location;\n    let questions = getAllQuestions(!state ? 1 : state.skillLevel);\n    const quesConst = [];\n    questions.forEach(q => {\n      const mappedQues = mapToQuesModel(q);\n      quesConst.push(mappedQues);\n    });\n    setQuesList(quesConst);\n  }, [location]); // useEffect(() => {\n  //   const interval = setInterval(function () {\n  //     console.log(quesList);\n  //     saveTestState(quesList, location.state.skillLevel, false);\n  //   }, 5000);\n  //   return () => {\n  //     clearInterval(interval);\n  //     console.log(\"component-unmounted\");\n  //   };\n  // }, [quesList, location]);\n\n  return !isSubmitted ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"test-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"timer-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomTimer, {\n    onTimeFinish: onTimeFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"question-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: moveToPrev,\n    disabled: currentQues === 0,\n    className: \"navigate-ques prev\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-chevron-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  })), quesList.length > 0 && /*#__PURE__*/React.createElement(Question, {\n    key: currentQues,\n    ques: { ...quesList[currentQues]\n    },\n    onCheckAnswer: onCheckAnswer,\n    quesIndex: currentQues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: moveToNext,\n    disabled: currentQues >= quesCount - 1,\n    className: \"navigate-ques next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-chevron-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"attempt-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, quesList.map((ques, quesNo) => /*#__PURE__*/React.createElement(\"button\", {\n    className: `navigate-ques-${getQuesState(ques, quesNo)}`,\n    onClick: () => navigateToQues(quesNo),\n    key: quesNo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, quesNo + 1))), currentQues >= quesCount - 1 && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    className: \"submit-test-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, \"Submit Test\"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"test-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"question-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, timesUp ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 22\n    }\n  }, \"Times up!\") : /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 43\n    }\n  }, \"Good job!\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"submit-subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, \" Your test is submitted successfully\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/test-report\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, \"Test analysis\"))));\n};\n\n_s(TakeTest, \"ioIn+KZasKlLqdKNiGk7NfCkMTM=\");\n\n_c = TakeTest;\nTakeTest.propTypes = {\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      skillLevel: PropTypes.isRequired\n    })\n  }).isRequired\n};\nexport default TakeTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"TakeTest\");","map":{"version":3,"sources":["C:/Users/vasu.gupta/UnUsed/Documents/online-test/src/components/takeTest.jsx"],"names":["React","useEffect","useState","confirmAlert","Link","getAllQuestions","getAttemptCount","saveTestState","Question","CustomTimer","PropTypes","TakeTest","props","quesList","setQuesList","currentQues","setCurrentQues","isSubmitted","setIsSubmitted","timesUp","setTimesUp","location","quesCount","length","mapToQuesModel","ques","title","choices","multipleAns","answer","mapChoices","map","choice","value","selected","state","answered","seen","submitTest","skillLevel","handleSubmit","attemptCount","message","buttons","label","onClick","onTimeFinish","othersAnswered","currentChoice","filter","ch","index","onCheckAnswer","quesIndex","choiceIndex","e","target","checked","type","slice","q","moveToPrev","quesListConst","moveToNext","navigateToQues","quesNo","getQuesState","questions","quesConst","forEach","mappedQues","push","propTypes","shape","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getAllQuestions, getAttemptCount } from \"../utils/questionsUtil.js\";\r\nimport { saveTestState } from \"../utils/sessionManag.js\";\r\nimport Question from \"./question.jsx\";\r\nimport CustomTimer from \"./timer.jsx\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TakeTest = (props) => {\r\n  const [quesList, setQuesList] = useState([]);\r\n  const [currentQues, setCurrentQues] = useState(0);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [timesUp, setTimesUp] = useState(false);\r\n\r\n  const { location } = props;\r\n\r\n  const quesCount = quesList.length;\r\n\r\n  function mapToQuesModel(ques) {\r\n    const { title, choices, multipleAns, answer } = ques;\r\n\r\n    const mapChoices = choices.map((choice) => {\r\n      return { value: choice, selected: false };\r\n    });\r\n\r\n    return {\r\n      title,\r\n      choices: mapChoices,\r\n      multipleAns,\r\n      state: { answered: false, seen: false },\r\n      answer,\r\n    };\r\n  }\r\n\r\n  function submitTest() {\r\n    saveTestState(quesList, location.state.skillLevel, true);\r\n    setIsSubmitted(true);\r\n  }\r\n\r\n  function handleSubmit() {\r\n    const attemptCount = getAttemptCount(quesList);\r\n\r\n    if (attemptCount < quesCount)\r\n      confirmAlert({\r\n        title: \"Submit test\",\r\n        message: `You have not attempted ${\r\n          quesCount - attemptCount\r\n        } questions. Still want to submit ?`,\r\n        buttons: [\r\n          {\r\n            label: \"Yes\",\r\n            onClick: () => submitTest(),\r\n          },\r\n          {\r\n            label: \"No\",\r\n            onClick: () => {},\r\n          },\r\n        ],\r\n      });\r\n    else {\r\n      submitTest();\r\n    }\r\n  }\r\n\r\n  function onTimeFinish() {\r\n    setTimesUp(true);\r\n    submitTest();\r\n  }\r\n\r\n  function othersAnswered(choices, currentChoice) {\r\n    return choices.filter((ch, index) => index !== currentChoice && ch.selected)\r\n      .length;\r\n  }\r\n\r\n  const onCheckAnswer = (quesIndex, choiceIndex, e) => {\r\n    const selected = e.target.checked;\r\n\r\n    if (e.target.type === \"radio\") {\r\n      setQuesList([\r\n        ...quesList.slice(0, quesIndex),\r\n        {\r\n          ...quesList[quesIndex],\r\n          choices: [\r\n            ...quesList[quesIndex][\"choices\"].slice(0, choiceIndex).map((q) => {\r\n              return { ...q, selected: false };\r\n            }),\r\n            { ...quesList[quesIndex][\"choices\"][choiceIndex], selected: true },\r\n            ...quesList[quesIndex][\"choices\"]\r\n              .slice(choiceIndex + 1)\r\n              .map((q) => {\r\n                return { ...q, selected: false };\r\n              }),\r\n          ],\r\n          state: {\r\n            ...quesList[quesIndex].state,\r\n            answered: true,\r\n          },\r\n        },\r\n        ...quesList.slice(quesIndex + 1),\r\n      ]);\r\n    } else {\r\n      setQuesList([\r\n        ...quesList.slice(0, quesIndex),\r\n        {\r\n          ...quesList[quesIndex],\r\n          choices: [\r\n            ...quesList[quesIndex][\"choices\"].slice(0, choiceIndex),\r\n            {\r\n              ...quesList[quesIndex][\"choices\"][choiceIndex],\r\n              selected: selected,\r\n            },\r\n            ...quesList[quesIndex][\"choices\"].slice(choiceIndex + 1),\r\n          ],\r\n          state: {\r\n            ...quesList[quesIndex].state,\r\n            answered:\r\n              othersAnswered(quesList[quesIndex].choices, choiceIndex) ||\r\n              selected,\r\n          },\r\n        },\r\n        ...quesList.slice(quesIndex + 1),\r\n      ]);\r\n    }\r\n  };\r\n\r\n  function moveToPrev() {\r\n    const quesListConst = quesList;\r\n\r\n    quesListConst[currentQues].state = {\r\n      ...quesListConst[currentQues].state,\r\n      seen: true,\r\n    };\r\n    setQuesList(quesListConst);\r\n\r\n    if (currentQues === 0) return;\r\n    setCurrentQues(currentQues - 1);\r\n  }\r\n\r\n  function moveToNext() {\r\n    const quesListConst = quesList;\r\n\r\n    quesListConst[currentQues].state = {\r\n      ...quesListConst[currentQues].state,\r\n      seen: true,\r\n    };\r\n    setQuesList(quesListConst);\r\n\r\n    if (currentQues >= quesCount) return;\r\n    setCurrentQues(currentQues + 1);\r\n  }\r\n\r\n  function navigateToQues(quesNo) {\r\n    const quesListConst = quesList;\r\n    quesListConst[currentQues].state = {\r\n      ...quesListConst[currentQues].state,\r\n      seen: true,\r\n    };\r\n    quesListConst[quesNo].state = {\r\n      ...quesListConst[quesNo].state,\r\n      seen: true,\r\n    };\r\n    setCurrentQues(quesNo);\r\n  }\r\n\r\n  function getQuesState(ques, quesNo) {\r\n    if (currentQues === quesNo) return \"current\";\r\n    else if (ques.state.answered) return \"answered\";\r\n    else if (ques.state.seen) return \"seen\";\r\n    else return \"unseen\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    const { state } = location;\r\n    let questions = getAllQuestions(!state ? 1 : state.skillLevel);\r\n\r\n    const quesConst = [];\r\n\r\n    questions.forEach((q) => {\r\n      const mappedQues = mapToQuesModel(q);\r\n      quesConst.push(mappedQues);\r\n    });\r\n\r\n    setQuesList(quesConst);\r\n  }, [location]);\r\n\r\n  // useEffect(() => {\r\n  //   const interval = setInterval(function () {\r\n  //     console.log(quesList);\r\n  //     saveTestState(quesList, location.state.skillLevel, false);\r\n  //   }, 5000);\r\n\r\n  //   return () => {\r\n  //     clearInterval(interval);\r\n  //     console.log(\"component-unmounted\");\r\n  //   };\r\n  // }, [quesList, location]);\r\n\r\n  return !isSubmitted ? (\r\n    <>\r\n      <div id=\"test-container\">\r\n        <div id=\"timer-area\">\r\n          <CustomTimer onTimeFinish={onTimeFinish} />\r\n        </div>\r\n        <div id=\"question-area\">\r\n          <button\r\n            onClick={moveToPrev}\r\n            disabled={currentQues === 0}\r\n            className=\"navigate-ques prev\"\r\n          >\r\n            <i className=\"fas fa-chevron-left\"></i>\r\n          </button>\r\n          {quesList.length > 0 && (\r\n            <Question\r\n              key={currentQues}\r\n              ques={{ ...quesList[currentQues] }}\r\n              onCheckAnswer={onCheckAnswer}\r\n              quesIndex={currentQues}\r\n            />\r\n          )}\r\n          <button\r\n            onClick={moveToNext}\r\n            disabled={currentQues >= quesCount - 1}\r\n            className=\"navigate-ques next\"\r\n          >\r\n            <i className=\"fas fa-chevron-right\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"attempt-summary\">\r\n          {quesList.map((ques, quesNo) => (\r\n            <button\r\n              className={`navigate-ques-${getQuesState(ques, quesNo)}`}\r\n              onClick={() => navigateToQues(quesNo)}\r\n              key={quesNo}\r\n            >\r\n              {quesNo + 1}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        {currentQues >= quesCount - 1 && (\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleSubmit}\r\n            className=\"submit-test-btn\"\r\n          >\r\n            Submit Test\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <div id=\"test-container\">\r\n        <div id=\"question-wrapper\">\r\n          {timesUp ? <h2>Times up!</h2> : <h2>Good job!</h2>}\r\n          <p id=\"submit-subtitle\"> Your test is submitted successfully</p>\r\n          <Link to=\"/test-report\">Test analysis</Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nTakeTest.propTypes = {\r\n  location: PropTypes.shape({\r\n    state: PropTypes.shape({\r\n      skillLevel: PropTypes.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nexport default TakeTest;\r\n"]},"metadata":{},"sourceType":"module"}