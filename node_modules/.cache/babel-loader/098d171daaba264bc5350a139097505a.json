{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vasu.gupta\\\\UnUsed\\\\Documents\\\\online-test\\\\src\\\\components\\\\timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Timer from \"react-timer-wrapper\";\nimport Timecode from \"react-timecode\";\nimport { EXAM_TIME_IN_MIN } from \"../constants\";\nimport PropTypes from \"prop-types\";\n\nconst CustomTimer = props => {\n  _s();\n\n  const [time, setTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n\n  const onTimerUpdate = ({\n    time,\n    duration\n  }) => {\n    setTime(time);\n    setDuration(duration);\n  };\n\n  const onFinish = () => {\n    props.onTimeFinish();\n  };\n  /**\r\n   * This function returns the time configured in minutes\r\n   */\n\n\n  function getConfigTime() {\n    if (!EXAM_TIME_IN_MIN) {\n      return 1;\n    }\n\n    return EXAM_TIME_IN_MIN;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    active: true,\n    duration: getConfigTime() * 60 * 1000,\n    onTimeUpdate: onTimerUpdate,\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Timecode, {\n    time: duration - time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(CustomTimer, \"D/3ha6+bLg9RiKL5tx3dQq0Loag=\");\n\n_c = CustomTimer;\nCustomTimer.propTypes = {\n  onTimeFinish: PropTypes.func.isRequired\n};\nexport default CustomTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomTimer\");","map":{"version":3,"sources":["C:/Users/vasu.gupta/UnUsed/Documents/online-test/src/components/timer.jsx"],"names":["React","useState","Timer","Timecode","EXAM_TIME_IN_MIN","PropTypes","CustomTimer","props","time","setTime","duration","setDuration","onTimerUpdate","onFinish","onTimeFinish","getConfigTime","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;;AAEA,QAAMW,aAAa,GAAG,CAAC;AAAEJ,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAD,KAAwB;AAC5CD,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAHD;;AAKA,QAAMG,QAAQ,GAAG,MAAM;AACrBN,IAAAA,KAAK,CAACO,YAAN;AACD,GAFD;AAIA;AACF;AACA;;;AACE,WAASC,aAAT,GAAyB;AACvB,QAAI,CAACX,gBAAL,EAAuB;AACrB,aAAO,CAAP;AACD;;AACD,WAAOA,gBAAP;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,QAAQ,EAAEW,aAAa,KAAK,EAAlB,GAAuB,IAFnC;AAGE,IAAA,YAAY,EAAEH,aAHhB;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEH,QAAQ,GAAGF,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD,CAlCD;;GAAMF,W;;KAAAA,W;AAoCNA,WAAW,CAACU,SAAZ,GAAwB;AACtBF,EAAAA,YAAY,EAAET,SAAS,CAACY,IAAV,CAAeC;AADP,CAAxB;AAIA,eAAeZ,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Timer from \"react-timer-wrapper\";\r\nimport Timecode from \"react-timecode\";\r\nimport { EXAM_TIME_IN_MIN } from \"../constants\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomTimer = (props) => {\r\n  const [time, setTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n\r\n  const onTimerUpdate = ({ time, duration }) => {\r\n    setTime(time);\r\n    setDuration(duration);\r\n  };\r\n\r\n  const onFinish = () => {\r\n    props.onTimeFinish();\r\n  };\r\n\r\n  /**\r\n   * This function returns the time configured in minutes\r\n   */\r\n  function getConfigTime() {\r\n    if (!EXAM_TIME_IN_MIN) {\r\n      return 1;\r\n    }\r\n    return EXAM_TIME_IN_MIN;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Timer\r\n        active\r\n        duration={getConfigTime() * 60 * 1000}\r\n        onTimeUpdate={onTimerUpdate}\r\n        onFinish={onFinish}\r\n      />\r\n      <Timecode time={duration - time} />\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomTimer.propTypes = {\r\n  onTimeFinish: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CustomTimer;\r\n"]},"metadata":{},"sourceType":"module"}