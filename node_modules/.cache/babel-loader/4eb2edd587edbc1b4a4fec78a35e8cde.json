{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vasu.gupta\\\\UnUsed\\\\Documents\\\\online-test\\\\src\\\\components\\\\examInfo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"../styling/common.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getUserInfo, isRegistered } from \"../utils/sessionManag\";\nimport { EXAM_TIME_IN_MIN, quesConst } from \"../constantValues\";\nimport MemoizedHeader from \"./header\";\n\nconst ExamInfo = () => {\n  _s();\n\n  const [arrangeDetails, setArrangeDetails] = useState({\n    terms: false\n  });\n  const history = useHistory();\n\n  function validateDetails() {\n    let isValid = true;\n\n    if (!arrangeDetails[\"skill-level\"]) {\n      toast.warn(\"Please choose a skill level!!\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n        autoClose: 5000,\n        toastId: \"skill-level\"\n      });\n      isValid = false;\n    }\n\n    if (!arrangeDetails[\"terms\"]) {\n      toast.warn(\"You must agree to the terms!\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n        autoClose: 5000,\n        toastId: \"terms\"\n      });\n      isValid = false;\n    }\n\n    return isValid;\n  }\n\n  function arrangeTest() {\n    if (!validateDetails()) return;\n    history.push({\n      pathname: \"/take-test\",\n      state: {\n        skillLevel: arrangeDetails[\"skill-level\"]\n      }\n    });\n  }\n\n  function handleChange(e) {\n    let value;\n    if (e.target.type === \"checkbox\") value = e.target.checked;else value = e.target.value;\n    setArrangeDetails({ ...arrangeDetails,\n      [e.target.name]: value\n    });\n  }\n\n  function getConfigTime() {\n    if (!EXAM_TIME_IN_MIN) {\n      return 1;\n    }\n\n    return EXAM_TIME_IN_MIN;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MemoizedHeader, {\n    isRegistered: isRegistered(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"exam-info content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Hello\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, getUserInfo() ? getUserInfo().name : \"\"))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, `Let's have a look at examination information first`), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"This exam contains multiple choice questions\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Some questions may have \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 37\n    }\n  }, \"multiple answers\"), \" (from the choices given)\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Each question has \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 31\n    }\n  }, \"score = 1\"), \" for correct and\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"0\"), \" for incorrect\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"There is no negative marking\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Questions will be according to the skill level choosen by you\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"This exam will contain all the questions according to your choosen skill level\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"Total time for the exam is\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, getConfigTime(), \" minutes\"))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Attempting test instructions: \"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"exam-instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"You will get questions status summary at bottom of test screen\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, \"Attempted: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"green-color box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 28\n    }\n  })), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, \"Not seen: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"grey-color box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, \"Seen but not attempted:\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"yellow-color box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Current question: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"blue-color box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 35\n    }\n  })))), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"You can submit the test anytime, if you have not attempted any of the question and attempt to submit, it will give you warning once\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Note: \"), \"Once the exam is started you\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"should not close the tab or refresh the page, or it will start again\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"agree-terms\",\n    name: \"terms\",\n    type: \"checkbox\",\n    value: \"agree\",\n    onChange: handleChange,\n    checked: arrangeDetails[\"terms\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"agree-terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"I agree to all the terms and conditions\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered form-group\",\n    id: \"skill-inputs-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, \"Choose your skill level\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"level1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"select-level\",\n    id: \"level1\",\n    name: \"skill-level\",\n    type: \"radio\",\n    value: quesConst.BEGINNER,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), \"Beginner\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"level2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"select-level\",\n    id: \"level2\",\n    name: \"skill-level\",\n    type: \"radio\",\n    value: quesConst.INTERMEDIATE,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }), \"Intermediate\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"level3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"select-level\",\n    id: \"level3\",\n    name: \"skill-level\",\n    type: \"radio\",\n    value: quesConst.ADVANCE,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), \"Advance\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"take-test-btn\",\n    onClick: arrangeTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"Take test\"))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(ExamInfo, \"/c0FCj+O4+lWF4EaMaHWS5hW+N8=\", false, function () {\n  return [useHistory];\n});\n\n_c = ExamInfo;\nexport default ExamInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExamInfo\");","map":{"version":3,"sources":["C:/Users/vasu.gupta/UnUsed/Documents/online-test/src/components/examInfo.jsx"],"names":["React","useState","useHistory","toast","ToastContainer","getUserInfo","isRegistered","EXAM_TIME_IN_MIN","quesConst","MemoizedHeader","ExamInfo","arrangeDetails","setArrangeDetails","terms","history","validateDetails","isValid","warn","position","POSITION","BOTTOM_CENTER","autoClose","toastId","arrangeTest","push","pathname","state","skillLevel","handleChange","e","value","target","type","checked","name","getConfigTime","BEGINNER","INTERMEDIATE","ADVANCE"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"../styling/common.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getUserInfo, isRegistered } from \"../utils/sessionManag\";\r\nimport { EXAM_TIME_IN_MIN, quesConst } from \"../constantValues\";\r\nimport MemoizedHeader from \"./header\";\r\n\r\nconst ExamInfo = () => {\r\n  const [arrangeDetails, setArrangeDetails] = useState({terms: false,});\r\n\r\n  const history = useHistory();\r\n\r\n  function validateDetails() {\r\n  let isValid = true;\r\n\r\n    if (!arrangeDetails[\"skill-level\"]) {\r\n      toast.warn(\"Please choose a skill level!!\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n        autoClose: 5000,\r\n        toastId: \"skill-level\",\r\n      });\r\n      isValid = false;\r\n    }\r\n    if (!arrangeDetails[\"terms\"]) {\r\n      toast.warn(\"You must agree to the terms!\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n        autoClose: 5000,\r\n        toastId: \"terms\",\r\n      });\r\n      isValid = false;\r\n    }\r\n\r\n  return isValid;\r\n  }\r\n\r\n  function arrangeTest() {\r\n    if (!validateDetails()) return;\r\n\r\n    history.push({\r\n      pathname: \"/take-test\",\r\n      state: { skillLevel: arrangeDetails[\"skill-level\"] },\r\n    });\r\n  }\r\n\r\n  function handleChange(e) {\r\n    let value;\r\n    if (e.target.type === \"checkbox\") value = e.target.checked;\r\n    else value = e.target.value;\r\n    setArrangeDetails({ ...arrangeDetails, [e.target.name]: value });\r\n  }\r\n\r\n  function getConfigTime() {\r\n    if (!EXAM_TIME_IN_MIN) {\r\n      return 1;\r\n    }\r\n    return EXAM_TIME_IN_MIN;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MemoizedHeader isRegistered={isRegistered()} />\r\n      <div className=\"exam-info content\">\r\n        {/* replace with utility method */}\r\n        <p className=\"text-center\">\r\n          Hello{\" \"}\r\n          <span className=\"username\">\r\n            <strong>{getUserInfo() ? getUserInfo().name : \"\"}</strong>\r\n          </span>\r\n        </p>\r\n        <p>{`Let's have a look at examination information first`}</p>\r\n        <ol>\r\n          <li>This exam contains multiple choice questions</li>\r\n          <li>\r\n            Some questions may have <strong>multiple answers</strong> (from the\r\n            choices given)\r\n          </li>\r\n          <li>\r\n            Each question has <strong>score = 1</strong> for correct and{\" \"}\r\n            <strong>0</strong> for incorrect\r\n          </li>\r\n          <li>There is no negative marking</li>\r\n          <li>Questions will be according to the skill level choosen by you</li>\r\n          <li>\r\n            This exam will contain all the questions according to your choosen\r\n            skill level\r\n          </li>\r\n          <li>\r\n            Total time for the exam is{\" \"}\r\n            <strong>{getConfigTime()} minutes</strong>\r\n          </li>\r\n        </ol>\r\n        <br />\r\n        <p>{\"Attempting test instructions: \"}</p>\r\n        <ul className=\"exam-instructions\">\r\n          <li>\r\n            You will get questions status summary at bottom of test screen\r\n          </li>\r\n          <li>\r\n            <ul>\r\n              <li>\r\n                Attempted: <span className=\"green-color box\"></span>\r\n              </li>\r\n              <li>\r\n                Not seen: <span className=\"grey-color box\"></span>\r\n              </li>\r\n              <li>\r\n                Seen but not attempted:{\" \"}\r\n                <span className=\"yellow-color box\"></span>\r\n              </li>\r\n              <li>\r\n                Current question: <span className=\"blue-color box\"></span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            You can submit the test anytime, if you have not attempted any of\r\n            the question and attempt to submit, it will give you warning once\r\n          </li>\r\n        </ul>\r\n        <br />\r\n        <p>\r\n          <strong>Note: </strong>Once the exam is started you{\" \"}\r\n          <strong>\r\n            should not close the tab or refresh the page, or it will start again\r\n          </strong>\r\n        </p>\r\n        <div className=\"form-group\">\r\n          <input\r\n            id=\"agree-terms\"\r\n            name=\"terms\"\r\n            type=\"checkbox\"\r\n            value=\"agree\"\r\n            onChange={handleChange}\r\n            checked={arrangeDetails[\"terms\"]}\r\n          />\r\n          <label htmlFor=\"agree-terms\">\r\n            I agree to all the terms and conditions\r\n          </label>\r\n        </div>\r\n        <div className=\"centered form-group\" id=\"skill-inputs-wrapper\">\r\n          <h4>Choose your skill level</h4>\r\n          <label htmlFor=\"level1\">\r\n            <input\r\n              className=\"select-level\"\r\n              id=\"level1\"\r\n              name=\"skill-level\"\r\n              type=\"radio\"\r\n              value={quesConst.BEGINNER}\r\n              onChange={handleChange}\r\n            />\r\n            Beginner\r\n          </label>\r\n          <label htmlFor=\"level2\">\r\n            <input\r\n              className=\"select-level\"\r\n              id=\"level2\"\r\n              name=\"skill-level\"\r\n              type=\"radio\"\r\n              value={quesConst.INTERMEDIATE}\r\n              onChange={handleChange}\r\n            />\r\n            Intermediate\r\n          </label>\r\n          <label htmlFor=\"level3\">\r\n            <input\r\n              className=\"select-level\"\r\n              id=\"level3\"\r\n              name=\"skill-level\"\r\n              type=\"radio\"\r\n              value={quesConst.ADVANCE}\r\n              onChange={handleChange}\r\n            />\r\n            Advance\r\n          </label>\r\n        </div>\r\n\r\n        <div className=\"centered\">\r\n          <button id=\"take-test-btn\" onClick={arrangeTest}>\r\n            Take test\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExamInfo;\r\n"]},"metadata":{},"sourceType":"module"}