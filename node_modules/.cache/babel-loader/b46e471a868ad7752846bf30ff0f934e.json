{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vasu.gupta\\\\UnUsed\\\\Documents\\\\online-test\\\\src\\\\components\\\\question.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Question = props => {\n  const {\n    title,\n    multipleAns,\n    choices\n  } = props.ques;\n  const {\n    quesIndex\n  } = props;\n\n  const renderChoices = (choices, isMultiple) => {\n    if (isMultiple) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, choices.map((choice, choiceIndex) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: `${choiceIndex}-${quesIndex}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: `${choice[\"value\"]}-${quesIndex}-id`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          id: `${choice[\"value\"]}-${quesIndex}-id`,\n          className: \"option\",\n          name: title + quesIndex,\n          type: \"checkbox\",\n          value: quesIndex,\n          checked: choice[\"selected\"],\n          onChange: e => props.onCheckAnswer(quesIndex, choiceIndex, e),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 19\n          }\n        }), choice[\"value\"]));\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, choices.map((choice, choiceIndex) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: `${choiceIndex}-${quesIndex}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: `${choice[\"value\"]}-${quesIndex}-id`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          id: `${choice[\"value\"]}-${quesIndex}-id`,\n          className: \"option\",\n          name: title + quesIndex,\n          type: \"radio\",\n          value: quesIndex,\n          checked: choice[\"selected\"],\n          onChange: e => props.onCheckAnswer(quesIndex, choiceIndex, e),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 19\n          }\n        }), choice[\"value\"]));\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"question-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, renderChoices(choices, multipleAns)));\n};\n\n_c = Question;\nQuestion.propTypes = {\n  ques: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    multipleAns: PropTypes.bool.isRequired,\n    choices: PropTypes.array.isRequired\n  }).isRequired,\n  onCheckAnswer: PropTypes.func.isRequired,\n  quesIndex: PropTypes.number.isRequired\n};\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/vasu.gupta/UnUsed/Documents/online-test/src/components/question.jsx"],"names":["React","PropTypes","Question","props","title","multipleAns","choices","ques","quesIndex","renderChoices","isMultiple","map","choice","choiceIndex","e","onCheckAnswer","propTypes","shape","string","isRequired","bool","array","func","number"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Question = (props) => {\r\n  const { title, multipleAns, choices } = props.ques;\r\n\r\n  const { quesIndex } = props;\r\n\r\n  const renderChoices = (choices, isMultiple) => {\r\n    if (isMultiple) {\r\n      return (\r\n        <>\r\n          {choices.map((choice, choiceIndex) => {\r\n            return (\r\n              <li key={`${choiceIndex}-${quesIndex}`}>\r\n                <label htmlFor={`${choice[\"value\"]}-${quesIndex}-id`}>\r\n                  <input\r\n                    id={`${choice[\"value\"]}-${quesIndex}-id`}\r\n                    className=\"option\"\r\n                    name={title + quesIndex}\r\n                    type=\"checkbox\"\r\n                    value={quesIndex}\r\n                    checked={choice[\"selected\"]}\r\n                    onChange={(e) =>\r\n                      props.onCheckAnswer(quesIndex, choiceIndex, e)\r\n                    }\r\n                  />\r\n                  {choice[\"value\"]}\r\n                </label>\r\n              </li>\r\n            );\r\n          })}\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          {choices.map((choice, choiceIndex) => {\r\n            return (\r\n              <li key={`${choiceIndex}-${quesIndex}`}>\r\n                <label htmlFor={`${choice[\"value\"]}-${quesIndex}-id`}>\r\n                  <input\r\n                    id={`${choice[\"value\"]}-${quesIndex}-id`}\r\n                    className=\"option\"\r\n                    name={title + quesIndex}\r\n                    type=\"radio\"\r\n                    value={quesIndex}\r\n                    checked={choice[\"selected\"]}\r\n                    onChange={(e) =>\r\n                      props.onCheckAnswer(quesIndex, choiceIndex, e)\r\n                    }\r\n                  />\r\n                  {choice[\"value\"]}\r\n                </label>\r\n              </li>\r\n            );\r\n          })}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"question-wrapper\">\r\n      <p id=\"question\">{title}</p>\r\n      <ul>{renderChoices(choices, multipleAns)}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nQuestion.propTypes = {\r\n  ques: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    multipleAns: PropTypes.bool.isRequired,\r\n    choices: PropTypes.array.isRequired,\r\n  }).isRequired,\r\n  onCheckAnswer: PropTypes.func.isRequired,\r\n  quesIndex: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}