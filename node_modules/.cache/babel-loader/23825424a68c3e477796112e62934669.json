{"ast":null,"code":"const sessionKey = \"ONLINE_EXAM_SESSION\";\nexport function getUserInfo() {\n  const session = JSON.parse(localStorage.getItem(sessionKey));\n  return session ? session[\"user\"] : null;\n}\nexport function getTestState() {\n  const session = JSON.parse(localStorage.getItem(sessionKey));\n  return session ? session[\"testState\"] : null;\n}\nexport function saveTestState(testState, skillLevel, isSubmitted) {\n  const session = JSON.parse(localStorage.getItem(sessionKey));\n  const newSession = { ...session,\n    testState: {\n      attempts: testState,\n      skillLevel,\n      isSubmitted\n    }\n  };\n  localStorage.setItem(sessionKey, JSON.stringify(newSession));\n}\nexport function cleanSession() {\n  localStorage.removeItem(sessionKey);\n}\nexport function isRegistered() {\n  const sessionUnparsed = localStorage.getItem(sessionKey);\n\n  if (sessionUnparsed) {\n    try {\n      return !!JSON.parse(sessionUnparsed).user;\n    } catch (e) {\n      console.log(\"Earlier session stored was corrupted\");\n      localStorage.removeItem(sessionKey);\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\nexport function hasGivenTest() {\n  const testState = getTestState();\n  return testState ? testState[\"isSubmitted\"] : false; // if (isRegistered()) {\n  //   return JSON.parse(localStorage.getItem(sessionKey))[\"isSubmitted\"];\n  // }\n}","map":{"version":3,"sources":["C:/Users/vasu.gupta/UnUsed/Documents/online-test/src/utils/sessionManagement.js"],"names":["sessionKey","getUserInfo","session","JSON","parse","localStorage","getItem","getTestState","saveTestState","testState","skillLevel","isSubmitted","newSession","attempts","setItem","stringify","cleanSession","removeItem","isRegistered","sessionUnparsed","user","e","console","log","hasGivenTest"],"mappings":"AAAA,MAAMA,UAAU,GAAG,qBAAnB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,UAArB,CAAX,CAAhB;AACA,SAAOE,OAAO,GAAGA,OAAO,CAAC,MAAD,CAAV,GAAqB,IAAnC;AACD;AAED,OAAO,SAASK,YAAT,GAAwB;AAC7B,QAAML,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,UAArB,CAAX,CAAhB;AACA,SAAOE,OAAO,GAAGA,OAAO,CAAC,WAAD,CAAV,GAA0B,IAAxC;AACD;AAED,OAAO,SAASM,aAAT,CAAuBC,SAAvB,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAChE,QAAMT,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,UAArB,CAAX,CAAhB;AACA,QAAMY,UAAU,GAAG,EACjB,GAAGV,OADc;AAEjBO,IAAAA,SAAS,EAAE;AAAEI,MAAAA,QAAQ,EAAEJ,SAAZ;AAAuBC,MAAAA,UAAvB;AAAmCC,MAAAA;AAAnC;AAFM,GAAnB;AAIAN,EAAAA,YAAY,CAACS,OAAb,CAAqBd,UAArB,EAAiCG,IAAI,CAACY,SAAL,CAAeH,UAAf,CAAjC;AACD;AAED,OAAO,SAASI,YAAT,GAAwB;AAC7BX,EAAAA,YAAY,CAACY,UAAb,CAAwBjB,UAAxB;AACD;AAED,OAAO,SAASkB,YAAT,GAAwB;AAC7B,QAAMC,eAAe,GAAGd,YAAY,CAACC,OAAb,CAAqBN,UAArB,CAAxB;;AAEA,MAAImB,eAAJ,EAAqB;AACnB,QAAI;AACF,aAAO,CAAC,CAAChB,IAAI,CAACC,KAAL,CAAWe,eAAX,EAA4BC,IAArC;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAlB,MAAAA,YAAY,CAACY,UAAb,CAAwBjB,UAAxB;AACA,aAAO,KAAP;AACD;AACF,GARD,MAQO;AACL,WAAO,KAAP;AACD;AACF;AAED,OAAO,SAASwB,YAAT,GAAwB;AAC7B,QAAMf,SAAS,GAAGF,YAAY,EAA9B;AACA,SAAOE,SAAS,GAAGA,SAAS,CAAC,aAAD,CAAZ,GAA8B,KAA9C,CAF6B,CAG7B;AACA;AACA;AACD","sourcesContent":["const sessionKey = \"ONLINE_EXAM_SESSION\";\r\n\r\nexport function getUserInfo() {\r\n  const session = JSON.parse(localStorage.getItem(sessionKey));\r\n  return session ? session[\"user\"] : null;\r\n}\r\n\r\nexport function getTestState() {\r\n  const session = JSON.parse(localStorage.getItem(sessionKey));\r\n  return session ? session[\"testState\"] : null;\r\n}\r\n\r\nexport function saveTestState(testState, skillLevel, isSubmitted) {\r\n  const session = JSON.parse(localStorage.getItem(sessionKey));\r\n  const newSession = {\r\n    ...session,\r\n    testState: { attempts: testState, skillLevel, isSubmitted },\r\n  };\r\n  localStorage.setItem(sessionKey, JSON.stringify(newSession));\r\n}\r\n\r\nexport function cleanSession() {\r\n  localStorage.removeItem(sessionKey);\r\n}\r\n\r\nexport function isRegistered() {\r\n  const sessionUnparsed = localStorage.getItem(sessionKey);\r\n\r\n  if (sessionUnparsed) {\r\n    try {\r\n      return !!JSON.parse(sessionUnparsed).user;\r\n    } catch (e) {\r\n      console.log(\"Earlier session stored was corrupted\");\r\n      localStorage.removeItem(sessionKey);\r\n      return false;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function hasGivenTest() {\r\n  const testState = getTestState();\r\n  return testState ? testState[\"isSubmitted\"] : false;\r\n  // if (isRegistered()) {\r\n  //   return JSON.parse(localStorage.getItem(sessionKey))[\"isSubmitted\"];\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}